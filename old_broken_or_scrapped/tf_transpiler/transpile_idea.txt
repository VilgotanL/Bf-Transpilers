#tapef**k?

-1 data 0 data 0 data -1 data 0 data 0 data -1 0 -2
   ^^^^^^^^^^^^^^^^^^
	1 tape

#INITIALLY
-1 0 0 0 -1 0 -2
#WE ALWAYS have a 0 cell inbetween directly after tape cell

#at -1 left of tape

v >
^ <+[-<<+]-

#inner level
+ +
- -
, ,
. .
< <<

> #BECOMES:
>>>+(- #IF AT END OF TAPE
- #set to -2
>>++[-->>++]-- #go to last cell (-2)
++>>--<< #move right twice
<<
++[-- #WHILE NOT -2

[->>+<<] #move right
<[->>+<<] #move right 2
< #go to before cell inbetween

++]--
++ #set to zero
>>-<< #set next cell to -1
+)-<<< >>

#> FINAL: >>>+(-->>++[-->>++]>>--<<<<++[--[->>+<<]<[->>+<<]<++]>>-<<+)-<

#OUTER LEVEL===============
#BECOMES:

< <<+[-<<+]-
> >>+[->>+]- >>++(-- #IF LAST CELL
++ #set to 0
>>- #set to -1
>>--<< #set -2 to next inbetween
<<
++)--<<

#> FINAL: >>+[->>+]->>++(>>->>--<<<<++)--<<




#OUTER LEVEL OTHER STUFF

_ >> +[-< [-] > >>+]- <<+[-<<+]- #final: >>+[-<[-]>>>+]-<<+[-<<+]-
. > [.>>] <+[-<<+]-
, #BECOMES:
>[-],>+<(>-<)----------(>[-]<)++++++++++
>[-<
>>>+(-->>++[-->>++]>>--<<<<++[--[->>+<<]<[->>+<<]<++]>>-<<+)-< #MOVE RIGHT lower level
[-],>+<(>-<)----------(>[-]<)++++++++++
>
]
+[->[-]>+]- #go to right, clear on the way
<<+[-<<+]- #go back to left

#FINAL ,: >[-],>+<(>-<)----------(>[-]<)++++++++++>[->>+(-->>++[-->>++]>>--<<<<++[--[->>+<<]<[->>+<<]<++]>>-<<+)-<[-],>+<(>-<)----------(>[-]<)++++++++++>]+[->[-]>+]-<<+[-<<+]-

+ #BECOMES:
>+----------(----------)++++++++++
{
>>>+(-->>++[-->>++]>>--<<<<++[--[->>+<<]<[->>+<<]<++]>>-<<+)-< #MOVE RIGHT
+----------(----------)++++++++++
}
<+[-<<+]- #go back to left

#FINAL +: >---------(----------)++++++++++{>>>+(-->>++[-->>++]>>--<<<<++[--[->>+<<]<[->>+<<]<++]>>-<<+)-<---------(----------)++++++++++}<+[-<<+]-

- #BECOMES:
#UNTESTED ###################################################################################################################################
>- +{-
++++++++++
>>-
+}-
<+[-<<+]- #go back

#FINAL -: >{+++++++++>>}-<+[-<<+]-

: #BECOMES:
>>+[->>+]-<<+<<+(>>-<<)->!(>[-]<)>[-<<+<<+(>>-<<)->!(>[-]<)]<<+!([-<<+]->>+<<+)->!(>[-]+<)< #not zero thing
>>(< #if whole tape 0, print 0
++++++++++++++++++++++++++++++++++++++++++++++++.[-]
>)!(-< #else
>+[->>+]- #go to right
<{<<} #while zero go left
++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------ #print as digit
<+[-< #while not -1
++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------ #print as digit
<+]->
>)<<
#FINAL ':': >>+[->>+]-<<+<<+(>>-<<)->!(>[-]<)>[-<<+<<+(>>-<<)->!(>[-]<)]<<+!([-<<+]->>+<<+)->!(>[-]+<)>(<++++++++++++++++++++++++++++++++++++++++++++++++.[-]>)!([->>+]-<{<<}++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------<+[-<++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------<+]->>)<<


#USEFUL:
#CHECK IF WHOLE TAPE NOT 0, puts 1/0 in first inbetween:
>>+[->>+]- #go to right
<<< #now at data
>+<
<+(>>-<<)-> #if -1
!(>[-]<) #if not 0
>[- #while
<<< #now at data
>+<
<+(>>-<<)-> #if -1
!(>[-]<) #if not 0
]
< #go to data
<+!(- #IF NOT -1
+[-<<+]- #go to -1
>>+<< #inc not zero bit
+)->
!( #IF NOT 0
>[-]+<
)
< #go back to left

#FINAL CHECK NOT ZERO: >>+[->>+]-<<+<<+(>>-<<)->!(>[-]<)>[-<<+<<+(>>-<<)->!(>[-]<)]<<+!([-<<+]->>+<<+)->!(>[-]+<)<